/**
 * Mapping of common cryptocurrency symbols to CoinGecko IDs
 */
const SYMBOL_TO_ID_MAP: Record<string, string> = {
  // Major cryptocurrencies
  btc: 'bitcoin',
  eth: 'ethereum',
  usdt: 'tether',
  bnb: 'binancecoin',
  sol: 'solana',
  usdc: 'usd-coin',
  xrp: 'ripple',
  steth: 'staked-ether',
  doge: 'dogecoin',
  ada: 'cardano',
  trx: 'tron',
  avax: 'avalanche-2',
  shib: 'shiba-inu',
  wbtc: 'wrapped-bitcoin',
  ton: 'the-open-network',
  link: 'chainlink',
  dot: 'polkadot',
  bch: 'bitcoin-cash',
  near: 'near',
  matic: 'matic-network',
  ltc: 'litecoin',
  dai: 'dai',
  leo: 'leo-token',
  uni: 'uniswap',
  etc: 'ethereum-classic',
  icp: 'internet-computer',
  hbar: 'hedera-hashgraph',
  apt: 'aptos',
  cro: 'crypto-com-chain',
  atom: 'cosmos',
  fil: 'filecoin',
  ldo: 'lido-dao',
  arb: 'arbitrum',
  mkr: 'maker',
  xlm: 'stellar',
  okb: 'okb',
  imx: 'immutable-x',
  op: 'optimism',
  inj: 'injective-protocol',
  tia: 'celestia',
  first: 'first-digital-usd',
  grt: 'the-graph',
  reth: 'rocket-pool-eth',
  mnt: 'mantle',
  strk: 'starknet',
  sei: 'sei-network',
  wif: 'dogwifcoin',
  pepe: 'pepe',
  bonk: 'bonk',
  floki: 'floki',
  meme: 'memecoin',
  bome: 'book-of-meme',
  wld: 'worldcoin-wld',
  jup: 'jupiter-exchange-solana',
  pyth: 'pyth-network',
  ondo: 'ondo-finance',
  jto: 'jito-governance-token',
  dym: 'dymension',
  alt: 'altlayer',
  manta: 'manta-network',
  ai: 'sleepless-ai',
  portal: 'portal',
  pixel: 'pixels',
  aevo: 'aevo',
  ethfi: 'ether-fi',
  ena: 'ethena',
  w: 'wormhole',
  tnsr: 'tensor',
  saga: 'saga-2',
  omni: 'omni-network',
  not: 'notcoin',
  io: 'io',
  zkj: 'zkjump',
  zro: 'layerzero',
  zk: 'zksync',
  blast: 'blast',
  dogs: 'dogs-2',
  hmstr: 'hamster-kombat',
  cati: 'catizen',
  neiro: 'neiro-ethereum',
  moodeng: 'moo-deng',
  goat: 'goatseus-maximus',
  pnut: 'peanut-the-squirrel',
  act: 'act-i-the-ai-prophecy',
  ban: 'banana-gun',
  chillguy: 'just-a-chill-guy',
  punt: 'punt',
  fartcoin: 'fartcoin',
  ai16z: 'ai16z',
  zerebro: 'zerebro',
  virtual: 'virtual-protocol',
  griffain: 'griffain',
  eliza: 'elizaos',
  degenai: 'degenai',
  swarms: 'swarms',
  cents: 'cents',
  alch: 'alchemist-ai',
  vader: 'vader-ai',
  snac: 'spectral',
  pippin: 'pippin',
  kween: 'kween',
  forest: 'forest',
  chaos: 'chaos',
  orbit: 'orbit',
  nova: 'nova',
  flux: 'flux',
  echo: 'echo',
  pulse: 'pulse',
  wave: 'wave',
  spark: 'spark',
  blaze: 'blaze',
  storm: 'storm',
  frost: 'frost',
  ember: 'ember',
  shade: 'shade',
  glow: 'glow',
  drift: 'drift',
  surge: 'surge',
  flow: 'flow',
  rush: 'rush',
  dash: 'dash',
  swift: 'swift',
  quick: 'quick',
  fast: 'fast',
  speed: 'speed',
  rapid: 'rapid',
  turbo: 'turbo',
  boost: 'boost',
  power: 'power',
  force: 'force',
  energy: 'energy',
  volt: 'volt',
  amp: 'amp',
  charge: 'charge',
  flash: 'flash',
  bolt: 'bolt',
  thunder: 'thunder',
  wind: 'wind',
  air: 'air',
  sky: 'sky',
  cloud: 'cloud',
  rain: 'rain',
  snow: 'snow',
  ice: 'ice',
  fire: 'fire',
  flame: 'flame',
  burn: 'burn',
  heat: 'heat',
  warm: 'warm',
  cool: 'cool',
  cold: 'cold',
  freeze: 'freeze',
  chill: 'chill',
  calm: 'calm',
  peace: 'peace',
  zen: 'zen',
  soul: 'soul',
  mind: 'mind',
  heart: 'heart',
  love: 'love',
  hope: 'hope',
  dream: 'dream',
  wish: 'wish',
  star: 'star',
  moon: 'moon',
  sun: 'sun',
  light: 'light',
  dark: 'dark',
  shadow: 'shadow',
  ghost: 'ghost',
  spirit: 'spirit',
  magic: 'magic',
  spell: 'spell',
  charm: 'charm',
  luck: 'luck',
  fate: 'fate',
  destiny: 'destiny',
  future: 'future',
  past: 'past',
  time: 'time',
  space: 'space',
  void: 'void',
  null: 'null',
  zero: 'zero',
  one: 'one',
  two: 'two',
  three: 'three',
  four: 'four',
  five: 'five',
  six: 'six',
  seven: 'seven',
  eight: 'eight',
  nine: 'nine',
  ten: 'ten',
};

/**
 * Resolve cryptocurrency symbol to CoinGecko ID
 * @param symbol - Cryptocurrency symbol (e.g., 'btc', 'eth', 'usdt')
 * @returns CoinGecko ID or the original symbol if not found in mapping
 */
export const resolveId = (symbol: string): string => {
  const normalizedSymbol = symbol.toLowerCase().trim();
  return SYMBOL_TO_ID_MAP[normalizedSymbol] ?? normalizedSymbol;
};
